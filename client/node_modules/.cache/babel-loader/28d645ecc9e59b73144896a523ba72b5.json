{"ast":null,"code":"var _jsxFileName = \"C:\\\\Contact\\\\client\\\\src\\\\components\\\\contacts\\\\Contacts.js\";\nimport React, { Fragment, useContext } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport ContactItem from './ContactItem';\nimport ContactContext from '../../context/contact/contactContext'; //The work we are going to do is contacts.js will get the state from contextcomponent then it will give to contextitem.\n\nconst Contacts = () => {\n  const contactContext = useContext(ContactContext);\n  const {\n    contacts,\n    filtered\n  } = contactContext;\n\n  if (contacts.length === 0) {\n    return /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 15\n      }\n    }, \"Please add a contact\");\n  }\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, filtered !== null ? filtered.map(contact => /*#__PURE__*/React.createElement(ContactItem, {\n    key: contact.id,\n    contact: contact,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 17\n    }\n  })) : contacts.map(contact => /*#__PURE__*/React.createElement(ContactItem, {\n    Key: contact.id,\n    contact: contact,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  })));\n};\n\nexport default Contacts;","map":{"version":3,"sources":["C:/Contact/client/src/components/contacts/Contacts.js"],"names":["React","Fragment","useContext","CSSTransition","TransitionGroup","ContactItem","ContactContext","Contacts","contactContext","contacts","filtered","length","map","contact","id"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,UAAvB,QAAwC,OAAxC;AACA,SAAQC,aAAR,EAAsBC,eAAtB,QAA4C,wBAA5C;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,cAAP,MAA2B,sCAA3B,C,CAEA;;AAGA,MAAMC,QAAQ,GAAC,MAAI;AAIf,QAAMC,cAAc,GAACN,UAAU,CAACI,cAAD,CAA/B;AACA,QAAM;AAACG,IAAAA,QAAD;AAAUC,IAAAA;AAAV,MAAqBF,cAA3B;;AAEA,MAAGC,QAAQ,CAACE,MAAT,KAAkB,CAArB,EAAuB;AAEnB,wBAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAN;AACH;;AAGD,sBACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,QAAQ,KAAG,IAAX,GACEA,QAAQ,CAACE,GAAT,CAAaC,OAAO,iBACnB,oBAAC,WAAD;AAAa,IAAA,GAAG,EAAEA,OAAO,CAACC,EAA1B;AAA8B,IAAA,OAAO,EAAED,OAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADF,GAIJJ,QAAQ,CAACG,GAAT,CAAaC,OAAO,iBACjB,oBAAC,WAAD;AAAa,IAAA,GAAG,EAAEA,OAAO,CAACC,EAA1B;AAA8B,IAAA,OAAO,EAAED,OAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,CALD,CADJ;AAYH,CAzBD;;AA2BA,eAAeN,QAAf","sourcesContent":["import React,{Fragment,useContext} from 'react';\r\nimport {CSSTransition,TransitionGroup} from 'react-transition-group';\r\nimport ContactItem from './ContactItem';\r\nimport ContactContext from '../../context/contact/contactContext';\r\n\r\n//The work we are going to do is contacts.js will get the state from contextcomponent then it will give to contextitem.\r\n\r\n\r\nconst Contacts=()=>{\r\n\r\n    \r\n    \r\n    const contactContext=useContext(ContactContext);\r\n    const {contacts,filtered} =contactContext;\r\n\r\n    if(contacts.length===0){\r\n\r\n        return<h4>Please add a contact</h4>\r\n    }\r\n     \r\n\r\n    return(\r\n        <Fragment>\r\n            {filtered!==null\r\n             ? filtered.map(contact=>(\r\n                <ContactItem key={contact.id} contact={contact}/>\r\n             )) :\r\n         contacts.map(contact=>(\r\n            <ContactItem Key={contact.id} contact={contact} />\r\n         ))}\r\n        </Fragment>\r\n    );\r\n    \r\n};\r\n\r\nexport default Contacts;"]},"metadata":{},"sourceType":"module"}