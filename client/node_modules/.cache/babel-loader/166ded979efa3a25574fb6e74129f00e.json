{"ast":null,"code":"var _jsxFileName = \"C:\\\\Contact\\\\client\\\\src\\\\context\\\\contact\\\\ContactState.js\";\nimport React, { useReducer } from 'react'; //userreducer is like a redux which is used to go to previous state or next state.\n//At first we are trying to hardcode using static data so we need a uuid whiich is given by react,. \n\nimport contactContext from './contactContext';\nimport contactReducer from './contactReducer';\nimport { v4 as uuidv4 } from 'uuid';\nimport { ADD_CONTACT, DELETE_CONTACT, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, FILTER_CONTACTS, CLEAR_FILTER } from '../types'; //state where the data from the UI is gahter and working of add deletee ect is dobe.\n\nconst ContactState = props => {\n  const initialState = {\n    contacts: [{\n      id: 1,\n      name: 'praveen',\n      email: 'prav@gmail.com',\n      phone: '123439402-82',\n      type: 'personal'\n    }, {\n      id: 2,\n      name: 'praveenk',\n      email: 'prave@gmail.com',\n      phone: '12349402-82',\n      type: 'personal'\n    }],\n    current: null\n  }; //state allows to access inside stat,dispatch the obj to reducer \n\n  const [state, dispatch] = useReducer(contactReducer, initialState); //ADD Contact\n\n  const addContact = contact => {\n    contact.id = uuidv4();\n    dispatch({\n      type: ADD_CONTACT,\n      payload: contact\n    });\n  }; //Delete Contact\n\n\n  const deleteContact = id => {\n    dispatch({\n      type: DELETE_CONTACT,\n      payload: id\n    });\n  }; //Set Current Contact\n\n\n  const setCurrent = contact => {\n    dispatch({\n      type: SET_CURRENT,\n      payload: contact\n    });\n  }; //Clear Current Contact\n\n\n  const clearCurrent = () => {\n    dispatch({\n      type: CLEAR_CURRENT\n    });\n  }; //Update Contact\n  //Filter Contacts\n  //Clear Filter\n  //props.children is pass functions from parent to child components, whereas the child components make use of these functions and the functions may change the state in a parent component above.\n\n\n  return /*#__PURE__*/React.createElement(contactContext.Provider, {\n    value: {\n      contacts: state.contacts,\n      current: state.current,\n      addContact,\n      deleteContact,\n      setCurrent,\n      clearCurrent\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, props.children);\n};\n\nexport default ContactState;","map":{"version":3,"sources":["C:/Contact/client/src/context/contact/ContactState.js"],"names":["React","useReducer","contactContext","contactReducer","v4","uuidv4","ADD_CONTACT","DELETE_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","FILTER_CONTACTS","CLEAR_FILTER","ContactState","props","initialState","contacts","id","name","email","phone","type","current","state","dispatch","addContact","contact","payload","deleteContact","setCurrent","clearCurrent","children"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,UAAd,QAA+B,OAA/B,C,CAAyC;AACvC;;AACF,OAAOC,cAAP,MAA4B,kBAA5B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SAAQC,EAAE,IAAIC,MAAd,QAA2B,MAA3B;AACA,SACIC,WADJ,EAGIC,cAHJ,EAIIC,WAJJ,EAKIC,aALJ,EAMIC,cANJ,EAOIC,eAPJ,EAQIC,YARJ,QASO,UATP,C,CAWA;;AAEA,MAAMC,YAAY,GAAGC,KAAK,IAAE;AACxB,QAAMC,YAAY,GAAC;AACfC,IAAAA,QAAQ,EAAC,CACL;AACIC,MAAAA,EAAE,EAAC,CADP;AAEIC,MAAAA,IAAI,EAAC,SAFT;AAGIC,MAAAA,KAAK,EAAC,gBAHV;AAIIC,MAAAA,KAAK,EAAC,cAJV;AAKIC,MAAAA,IAAI,EAAC;AALT,KADK,EAQL;AACIJ,MAAAA,EAAE,EAAC,CADP;AAEIC,MAAAA,IAAI,EAAC,UAFT;AAGIC,MAAAA,KAAK,EAAC,iBAHV;AAIIC,MAAAA,KAAK,EAAC,aAJV;AAKIC,MAAAA,IAAI,EAAC;AALT,KARK,CADM;AAkBfC,IAAAA,OAAO,EAAC;AAlBO,GAAnB,CADwB,CAqBxB;;AACA,QAAK,CAACC,KAAD,EAAOC,QAAP,IAAiBvB,UAAU,CAACE,cAAD,EAAgBY,YAAhB,CAAhC,CAtBwB,CAyBxB;;AACA,QAAMU,UAAU,GAACC,OAAO,IAAE;AACtBA,IAAAA,OAAO,CAACT,EAAR,GAAWZ,MAAM,EAAjB;AACAmB,IAAAA,QAAQ,CAAC;AAACH,MAAAA,IAAI,EAACf,WAAN;AAAkBqB,MAAAA,OAAO,EAACD;AAA1B,KAAD,CAAR;AAEH,GAJD,CA1BwB,CAgCxB;;;AACA,QAAME,aAAa,GAACX,EAAE,IAAE;AAEpBO,IAAAA,QAAQ,CAAC;AAACH,MAAAA,IAAI,EAACd,cAAN;AAAqBoB,MAAAA,OAAO,EAACV;AAA7B,KAAD,CAAR;AAEH,GAJD,CAjCwB,CAuCxB;;;AACA,QAAMY,UAAU,GAACH,OAAO,IAAE;AAEtBF,IAAAA,QAAQ,CAAC;AAACH,MAAAA,IAAI,EAACb,WAAN;AAAkBmB,MAAAA,OAAO,EAACD;AAA1B,KAAD,CAAR;AAEH,GAJD,CAxCwB,CA8CxB;;;AACA,QAAMI,YAAY,GAAC,MAAI;AACnBN,IAAAA,QAAQ,CAAC;AAACH,MAAAA,IAAI,EAACZ;AAAN,KAAD,CAAR;AAEH,GAHD,CA/CwB,CAsDxB;AAGA;AAGA;AAEJ;;;AACI,sBACI,oBAAC,cAAD,CAAgB,QAAhB;AACC,IAAA,KAAK,EAAE;AACHO,MAAAA,QAAQ,EAACO,KAAK,CAACP,QADZ;AAEHM,MAAAA,OAAO,EAACC,KAAK,CAACD,OAFX;AAGHG,MAAAA,UAHG;AAIHG,MAAAA,aAJG;AAKHC,MAAAA,UALG;AAMHC,MAAAA;AANG,KADR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASEhB,KAAK,CAACiB,QATR,CADJ;AAeH,CA9ED;;AAkFA,eAAelB,YAAf","sourcesContent":["import React,{useReducer} from 'react';  //userreducer is like a redux which is used to go to previous state or next state.\r\n  //At first we are trying to hardcode using static data so we need a uuid whiich is given by react,. \r\nimport contactContext from  './contactContext';\r\nimport contactReducer from './contactReducer';\r\nimport {v4 as uuidv4} from 'uuid';\r\nimport {\r\n    ADD_CONTACT,\r\n   \r\n    DELETE_CONTACT,\r\n    SET_CURRENT,\r\n    CLEAR_CURRENT,\r\n    UPDATE_CONTACT,\r\n    FILTER_CONTACTS,\r\n    CLEAR_FILTER\r\n} from '../types';\r\n\r\n//state where the data from the UI is gahter and working of add deletee ect is dobe.\r\n\r\nconst ContactState = props=>{\r\n    const initialState={\r\n        contacts:[\r\n            {\r\n                id:1,\r\n                name:'praveen',\r\n                email:'prav@gmail.com',\r\n                phone:'123439402-82',\r\n                type:'personal'\r\n            },\r\n            {\r\n                id:2,\r\n                name:'praveenk',\r\n                email:'prave@gmail.com',\r\n                phone:'12349402-82',\r\n                type:'personal'\r\n            }\r\n\r\n        ],\r\n        current:null\r\n    };\r\n    //state allows to access inside stat,dispatch the obj to reducer \r\n    const[state,dispatch]=useReducer(contactReducer,initialState);\r\n   \r\n\r\n    //ADD Contact\r\n    const addContact=contact=>{\r\n        contact.id=uuidv4();\r\n        dispatch({type:ADD_CONTACT,payload:contact});\r\n\r\n    };\r\n\r\n    //Delete Contact\r\n    const deleteContact=id=>{\r\n      \r\n        dispatch({type:DELETE_CONTACT,payload:id});\r\n\r\n    };\r\n\r\n    //Set Current Contact\r\n    const setCurrent=contact=>{\r\n        \r\n        dispatch({type:SET_CURRENT,payload:contact});\r\n\r\n    };\r\n\r\n    //Clear Current Contact\r\n    const clearCurrent=()=>{\r\n        dispatch({type:CLEAR_CURRENT});\r\n\r\n    };\r\n\r\n\r\n\r\n    //Update Contact\r\n\r\n\r\n    //Filter Contacts\r\n\r\n\r\n    //Clear Filter\r\n\r\n//props.children is pass functions from parent to child components, whereas the child components make use of these functions and the functions may change the state in a parent component above.\r\n    return (\r\n        <contactContext.Provider\r\n         value={{\r\n             contacts:state.contacts,\r\n             current:state.current,\r\n             addContact,\r\n             deleteContact,\r\n             setCurrent,\r\n             clearCurrent\r\n         }}>\r\n         {props.children}  \r\n        </contactContext.Provider>\r\n    );\r\n\r\n\r\n};\r\n\r\n\r\n\r\nexport default ContactState;"]},"metadata":{},"sourceType":"module"}