{"ast":null,"code":"var _jsxFileName = \"C:\\\\Contact\\\\client\\\\src\\\\context\\\\auth\\\\AuthState.js\";\nimport React, { useReducer } from 'react';\nimport axios from 'axios'; //we are using for sending request.. \n\nimport authContext from './authContext';\nimport authReducer from './authReducer';\nimport setAuthToken from '../../utils/setAuthToken';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, CLEAR_ERRORS } from '../types'; //we import context,reducer and type in the AUTHSTATE file.\n//state where the data from the UI is gahter and working of add deletee ect is dobe.\n\nconst AuthState = props => {\n  const initialState = {\n    //token we generate in the nodejs side will be stored in temporary storage.\n    token: localStorage.getItem('token'),\n    isAuthenticated: null,\n    //check whether he is authenticated or not\n    loading: true,\n    //loading is like working on backend.\n    user: null,\n    error: null\n  }; //state allows to access inside stat,dispatch the obj from reducer \n\n  const [state, dispatch] = useReducer(authReducer, initialState); //load user\n\n  const loadUser = async () => {\n    //@todo -load token into global headers...\n    if (localStorage.token) {\n      setAuthToken(localStorage.token);\n    }\n\n    try {\n      const res = await axios.get('/api/auth'); //check the auth path whether the token is valid one.\n\n      dispatch({\n        type: USER_LOADED,\n        payload: res.data\n      });\n    } catch (error) {\n      dispatch({\n        type: AUTH_ERROR\n      });\n    }\n  }; //reg user\n  //async keyword is used to keep promises and uses await syntax... and it is also making ab request to a backend.\n\n\n  const register = async FormData => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json' //setting the header format\n\n      }\n    }; //formData is one which stores key and value...\n\n    try {\n      const res = await axios.post('/api/users', FormData, config);\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n      loadUser(); ///after successful register we call the token of the user.\n    } catch (error) {\n      dispatch({\n        type: REGISTER_FAIL,\n        payload: error.response.data.msg\n      });\n    }\n  }; //login user\n\n\n  const login = () => console.log('login'); //logout user\n\n\n  const logout = () => console.log('logout'); //clearErrors\n\n\n  const clearErrors = () => dispatch({\n    type: CLEAR_ERRORS\n  }); //props.children is pass functions from parent to child components, whereas the child components make use of these functions and the functions may change the state in a parent component above.\n\n\n  return /*#__PURE__*/React.createElement(authContext.Provider, {\n    value: {\n      token: state.token,\n      isAuthenticated: state.isAuthenticated,\n      loading: state.loading,\n      user: state.user,\n      error: state.error,\n      register,\n      login,\n      logout,\n      clearErrors\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, props.children);\n};\n\nexport default AuthState;\n/*OUr motive is to reduce the code so we keep on class \r\nwhere we define the state and get the data from there UI part */","map":{"version":3,"sources":["C:/Contact/client/src/context/auth/AuthState.js"],"names":["React","useReducer","axios","authContext","authReducer","setAuthToken","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","CLEAR_ERRORS","AuthState","props","initialState","token","localStorage","getItem","isAuthenticated","loading","user","error","state","dispatch","loadUser","res","get","type","payload","data","register","FormData","config","headers","post","response","msg","login","console","log","logout","clearErrors","children"],"mappings":"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","sourcesContent":["import React,{useReducer} from 'react'; \r\nimport axios from 'axios';   //we are using for sending request.. \r\n import authContext from  './authContext';\r\nimport authReducer from './authReducer';\r\nimport setAuthToken from '../../utils/setAuthToken';\r\nimport {\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    USER_LOADED,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT,\r\n    CLEAR_ERRORS\r\n} from '../types';\r\n\r\n\r\n//we import context,reducer and type in the AUTHSTATE file.\r\n\r\n//state where the data from the UI is gahter and working of add deletee ect is dobe.\r\n\r\nconst AuthState = props=>{\r\n    const initialState={\r\n\r\n        //token we generate in the nodejs side will be stored in temporary storage.\r\n\r\n        token:localStorage.getItem('token'),\r\n        isAuthenticated:null, //check whether he is authenticated or not\r\n        loading:true, //loading is like working on backend.\r\n        user:null,\r\n        error:null\r\n        \r\n    };\r\n\r\n     //state allows to access inside stat,dispatch the obj from reducer \r\n     const[state,dispatch]=useReducer(authReducer,initialState);\r\n\r\n    //load user\r\n    const loadUser=async ()=>{\r\n        //@todo -load token into global headers...\r\n        if(localStorage.token){\r\n            setAuthToken(localStorage.token);\r\n        }\r\n\r\n        try {\r\n            const res=await axios.get('/api/auth'); //check the auth path whether the token is valid one.\r\n            \r\n            dispatch({type:USER_LOADED,payload:res.data});\r\n        } catch (error) {\r\n            dispatch({type:AUTH_ERROR});\r\n            \r\n        }\r\n    };\r\n\r\n    //reg user\r\n    //async keyword is used to keep promises and uses await syntax... and it is also making ab request to a backend.\r\n    const register =async FormData=>{\r\n      const config={\r\n    headers:{\r\n        'Content-Type':'application/json'  //setting the header format\r\n    }\r\n}\r\n//formData is one which stores key and value...\r\ntry {\r\n    const res=await axios.post('/api/users',FormData,config);\r\n\r\n    dispatch({\r\n        type:REGISTER_SUCCESS,\r\n        payload:res.data\r\n    });\r\n    loadUser(); ///after successful register we call the token of the user.\r\n    \r\n} catch (error) {\r\n    dispatch({\r\n        type:REGISTER_FAIL,\r\n        payload:error.response.data.msg  \r\n    });\r\n    \r\n}\r\n    }\r\n\r\n    //login user\r\n    const login=()=>console.log('login');\r\n\r\n    //logout user\r\n    const logout=()=>console.log('logout');\r\n\r\n    //clearErrors\r\n    const clearErrors=()=>dispatch({type:CLEAR_ERRORS});\r\n   \r\n   \r\n\r\n\r\n\r\n//props.children is pass functions from parent to child components, whereas the child components make use of these functions and the functions may change the state in a parent component above.\r\n    return (\r\n        <authContext.Provider\r\n         value={{\r\n             token:state.token,\r\n             isAuthenticated:state.isAuthenticated,\r\n             loading:state.loading,\r\n             user:state.user,\r\n             error:state.error,\r\n             register,\r\n             login,\r\n             logout,\r\n             clearErrors\r\n            \r\n         }}>\r\n         {props.children}  \r\n        </authContext.Provider>\r\n    );\r\n\r\n\r\n};\r\n\r\n\r\n\r\nexport default AuthState;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*OUr motive is to reduce the code so we keep on class \r\nwhere we define the state and get the data from there UI part */"]},"metadata":{},"sourceType":"module"}