{"ast":null,"code":"var _jsxFileName = \"C:\\\\Contact\\\\client\\\\src\\\\context\\\\contact\\\\ContactState.js\";\nimport React, { useReducer } from 'react'; //userreducer is like a redux which is used to go to previous state or next state.\n//At first we are trying to hardcode using static data so we need a uuid whiich is given by react,. \n\nimport contactContext from './contactContext';\nimport contactReducer from './contactReducer';\nimport axios from 'axios';\nimport { ADD_CONTACT, GET_CONTACTS, DELETE_CONTACT, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, FILTER_CONTACTS, CLEAR_CONTACTS, CLEAR_FILTER, CONTACT_ERROR } from '../types'; //state where the data from the UI is gahter and working of add deletee ect is dobe.\n\nconst ContactState = props => {\n  const initialState = {\n    contacts: null,\n    current: null,\n    filtered: null,\n    error: null\n  }; //state allows to access inside stat,dispatch the obj to reducer \n\n  const [state, dispatch] = useReducer(contactReducer, initialState); //GET CONTACT\n\n  const getContacts = async contact => {\n    try {\n      const res = await axios.get('/api/contacts');\n      dispatch({\n        type: GET_CONTACTS,\n        payload: res.data\n      });\n    } catch (error) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: error.res.msg\n      });\n    }\n  }; //ADD Contact\n\n\n  const addContact = async contact => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json' //setting the header format\n\n      }\n    };\n\n    try {\n      const res = await axios.post('/api/contacts', contact, config);\n      dispatch({\n        type: ADD_CONTACT,\n        payload: res.data\n      });\n    } catch (error) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: error.res.msg\n      });\n    }\n  }; //Update Contact\n\n\n  const updateContact = async contact => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json' //setting the header format\n\n      }\n    };\n\n    try {\n      const res = await axios.put(`/api/contacts/${contact._id}`, contact, config);\n      dispatch({\n        type: UPDATE_CONTACT,\n        payload: res.data\n      });\n    } catch (error) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: error.response.msg\n      });\n    }\n  }; //Clear Contact\n\n\n  const clearContacts = () => {\n    dispatch({\n      type: CLEAR_CONTACTS\n    });\n  }; //Delete Contact\n\n\n  const deleteContact = async id => {\n    try {\n      await axios.delete(`/api/contacts/${id}`);\n      dispatch({\n        type: DELETE_CONTACT,\n        payload: id\n      });\n    } catch (error) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: error.res.msg\n      });\n    }\n\n    dispatch({\n      type: DELETE_CONTACT,\n      payload: id\n    });\n  }; //Set Current Contact\n\n\n  const setCurrent = contact => {\n    dispatch({\n      type: SET_CURRENT,\n      payload: contact\n    });\n  }; //Clear Current Contact\n\n\n  const clearCurrent = () => {\n    dispatch({\n      type: CLEAR_CURRENT\n    });\n  }; //Filter Contacts\n\n\n  const filterContacts = text => {\n    dispatch({\n      type: FILTER_CONTACTS,\n      payload: text\n    });\n  }; //Clear Filter\n\n\n  const clearFilter = () => {\n    dispatch({\n      type: CLEAR_FILTER\n    });\n  }; //props.children is pass functions from parent to child components, whereas the child components make use of these functions and the functions may change the state in a parent component above.\n\n\n  return /*#__PURE__*/React.createElement(contactContext.Provider, {\n    value: {\n      contacts: state.contacts,\n      current: state.current,\n      filtered: state.filtered,\n      error: state.error,\n      addContact,\n      deleteContact,\n      setCurrent,\n      clearCurrent,\n      clearFilter,\n      filterContacts,\n      updateContact,\n      getContacts,\n      clearContacts\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }\n  }, props.children);\n};\n\nexport default ContactState;","map":{"version":3,"sources":["C:/Contact/client/src/context/contact/ContactState.js"],"names":["React","useReducer","contactContext","contactReducer","axios","ADD_CONTACT","GET_CONTACTS","DELETE_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","FILTER_CONTACTS","CLEAR_CONTACTS","CLEAR_FILTER","CONTACT_ERROR","ContactState","props","initialState","contacts","current","filtered","error","state","dispatch","getContacts","contact","res","get","type","payload","data","msg","addContact","config","headers","post","updateContact","put","_id","response","clearContacts","deleteContact","id","delete","setCurrent","clearCurrent","filterContacts","text","clearFilter","children"],"mappings":"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","sourcesContent":["import React,{useReducer} from 'react';  //userreducer is like a redux which is used to go to previous state or next state.\r\n  //At first we are trying to hardcode using static data so we need a uuid whiich is given by react,. \r\nimport contactContext from  './contactContext';\r\nimport contactReducer from './contactReducer';\r\nimport axios from 'axios';\r\n\r\nimport {\r\n    ADD_CONTACT,\r\n    GET_CONTACTS,\r\n    DELETE_CONTACT,\r\n    SET_CURRENT,\r\n    CLEAR_CURRENT,\r\n    UPDATE_CONTACT,\r\n    FILTER_CONTACTS,\r\n    CLEAR_CONTACTS,\r\n\r\n    CLEAR_FILTER,\r\n    CONTACT_ERROR\r\n} from '../types';\r\n\r\n//state where the data from the UI is gahter and working of add deletee ect is dobe.\r\n\r\nconst ContactState = props=>{\r\n    const initialState={\r\n        contacts:null,\r\n        current:null,\r\n        filtered:null,\r\n        error:null\r\n    };\r\n    //state allows to access inside stat,dispatch the obj to reducer \r\n    const[state,dispatch]=useReducer(contactReducer,initialState);\r\n\r\n    //GET CONTACT\r\n    const getContacts=async contact=>{\r\n        try {\r\n            const res=await axios.get('/api/contacts');\r\n            dispatch({\r\n                type:GET_CONTACTS,\r\n                payload:res.data});\r\n            \r\n        } catch (error) {\r\n            dispatch({type:CONTACT_ERROR,payload:error.res.msg});\r\n            \r\n        }\r\n        \r\n\r\n    };\r\n\r\n\r\n   \r\n\r\n    //ADD Contact\r\n    const addContact=async contact=>{\r\n        const config={\r\n            headers:{\r\n                'Content-Type':'application/json'  //setting the header format\r\n            }\r\n        }\r\n        try {\r\n            const res=await axios.post('/api/contacts',contact,config);\r\n            dispatch({\r\n                type:ADD_CONTACT,\r\n                payload:res.data});\r\n            \r\n        } catch (error) {\r\n            dispatch({type:CONTACT_ERROR,payload:error.res.msg});\r\n            \r\n        }\r\n        \r\n\r\n    };\r\n\r\n       //Update Contact\r\n       const updateContact=async contact=>{\r\n        const config={\r\n            headers:{\r\n                'Content-Type':'application/json'  //setting the header format\r\n            }\r\n        }\r\n        try {\r\n            const res=await axios.put(`/api/contacts/${contact._id}`,contact,config);\r\n            dispatch({type:UPDATE_CONTACT,payload:res.data});\r\n            \r\n        } catch (error) {\r\n            dispatch({type:CONTACT_ERROR,payload:error.response.msg});\r\n            \r\n        }\r\n        \r\n       \r\n\r\n    };\r\n\r\n\r\n    //Clear Contact\r\n    const clearContacts=()=>{\r\n        dispatch({type:CLEAR_CONTACTS});\r\n\r\n    };\r\n\r\n\r\n    //Delete Contact\r\n    const deleteContact=async id=>{\r\n        try {\r\n            await axios.delete(`/api/contacts/${id}`);\r\n          \r\n        dispatch({type:DELETE_CONTACT,payload:id});\r\n\r\n            \r\n        } catch (error) {\r\n            dispatch({type:CONTACT_ERROR,payload:error.res.msg});\r\n            \r\n        }\r\n        \r\n      \r\n        dispatch({type:DELETE_CONTACT,payload:id});\r\n\r\n    };\r\n\r\n    //Set Current Contact\r\n    const setCurrent=contact=>{\r\n        \r\n        dispatch({type:SET_CURRENT,payload:contact});\r\n\r\n    };\r\n\r\n    //Clear Current Contact\r\n    const clearCurrent=()=>{\r\n        dispatch({type:CLEAR_CURRENT});\r\n\r\n    };\r\n\r\n\r\n\r\n \r\n\r\n    //Filter Contacts\r\n\r\n    const filterContacts=text=>{\r\n        \r\n        dispatch({type:FILTER_CONTACTS,payload:text});\r\n\r\n    };\r\n\r\n\r\n\r\n    //Clear Filter\r\n    const clearFilter=()=>{\r\n        dispatch({type:CLEAR_FILTER});\r\n\r\n    };\r\n\r\n\r\n//props.children is pass functions from parent to child components, whereas the child components make use of these functions and the functions may change the state in a parent component above.\r\n    return (\r\n        <contactContext.Provider\r\n         value={{\r\n             contacts:state.contacts,\r\n             current:state.current,\r\n             filtered:state.filtered,\r\n             error:state.error,\r\n             addContact,\r\n             deleteContact,\r\n             setCurrent,\r\n             clearCurrent,\r\n             clearFilter,\r\n             filterContacts,\r\n             updateContact,\r\n             getContacts,\r\n             clearContacts\r\n         }}>\r\n         {props.children}  \r\n        </contactContext.Provider>\r\n    );\r\n\r\n\r\n};\r\n\r\n\r\n\r\nexport default ContactState;"]},"metadata":{},"sourceType":"module"}