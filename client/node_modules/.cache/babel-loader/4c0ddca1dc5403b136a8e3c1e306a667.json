{"ast":null,"code":"import { ADD_CONTACT, DELETE_CONTACT, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, FILTER_CONTACTS, CLEAR_FILTER, CONTACT_ERROR, GET_CONTACTS, CLEAR_CONTACTS } from '../types';\nexport default ((state, action) => {\n  switch (action.type) {\n    case GET_CONTACTS:\n      return { ...state,\n        contacts: action.payload,\n        loading: false\n      };\n\n    case ADD_CONTACT:\n      return { ...state,\n        contacts: [action.payload, ...state.contacts],\n        loading: false\n      };\n\n    case DELETE_CONTACT:\n      return { ...state,\n        contacts: state.contacts.filter(contact => contact._id !== action.payload),\n        loading: false\n      };\n\n    case CLEAR_CONTACTS:\n      return { ...state,\n        filtered: null,\n        contacts: null,\n        error: null,\n        current: null\n      };\n\n    case UPDATE_CONTACT:\n      return { ...state,\n        contacts: state.contacts.map(contact => contact._id === action.payload._id ? action.payload : contact),\n        loading: false\n      };\n\n    case SET_CURRENT:\n      return { ...state,\n        current: action.payload\n      };\n\n    case CLEAR_CURRENT:\n      return { ...state,\n        current: null\n      };\n\n    case FILTER_CONTACTS:\n      return { ...state,\n        filtered: state.contacts.filter(contact => {\n          const regex = new RegExp(`${action.payload}`, 'gi');\n          return contact.name.match(regex) || contact.email.match(regex);\n        })\n      };\n\n    case CLEAR_FILTER:\n      return { ...state,\n        filtered: null\n      };\n\n    case CONTACT_ERROR:\n      return { ...state,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["C:/Contact/client/src/context/contact/contactReducer.js"],"names":["ADD_CONTACT","DELETE_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","FILTER_CONTACTS","CLEAR_FILTER","CONTACT_ERROR","GET_CONTACTS","CLEAR_CONTACTS","state","action","type","contacts","payload","loading","filter","contact","_id","filtered","error","current","map","regex","RegExp","name","match","email"],"mappings":"AAAA,SACIA,WADJ,EAGIC,cAHJ,EAIIC,WAJJ,EAKIC,aALJ,EAMIC,cANJ,EAOIC,eAPJ,EAQIC,YARJ,EASIC,aATJ,EAUIC,YAVJ,EAWIC,cAXJ,QAYO,UAZP;AAeA,gBAAc,CAACC,KAAD,EAAOC,MAAP,KAAgB;AAC1B,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKJ,YAAL;AACI,aAAM,EACF,GAAGE,KADD;AAEFG,QAAAA,QAAQ,EAACF,MAAM,CAACG,OAFd;AAGFC,QAAAA,OAAO,EAAC;AAHN,OAAN;;AAMJ,SAAKf,WAAL;AACI,aAAM,EACF,GAAGU,KADD;AAEFG,QAAAA,QAAQ,EAAC,CAACF,MAAM,CAACG,OAAR,EAAgB,GAAGJ,KAAK,CAACG,QAAzB,CAFP;AAGFE,QAAAA,OAAO,EAAC;AAHN,OAAN;;AAKJ,SAAKd,cAAL;AACK,aAAM,EACC,GAAGS,KADJ;AAECG,QAAAA,QAAQ,EAACH,KAAK,CAACG,QAAN,CAAeG,MAAf,CAAsBC,OAAO,IAAEA,OAAO,CAACC,GAAR,KAAcP,MAAM,CAACG,OAApD,CAFV;AAGCC,QAAAA,OAAO,EAAC;AAHT,OAAN;;AAKL,SAAKN,cAAL;AACI,aAAM,EACF,GAAGC,KADD;AAEFS,QAAAA,QAAQ,EAAC,IAFP;AAGFN,QAAAA,QAAQ,EAAC,IAHP;AAIFO,QAAAA,KAAK,EAAC,IAJJ;AAKFC,QAAAA,OAAO,EAAC;AALN,OAAN;;AASH,SAAKjB,cAAL;AACO,aAAM,EACE,GAAGM,KADL;AAEEG,QAAAA,QAAQ,EAACH,KAAK,CAACG,QAAN,CAAeS,GAAf,CAAmBL,OAAO,IAAEA,OAAO,CAACC,GAAR,KAAcP,MAAM,CAACG,OAAP,CAAeI,GAA7B,GAAiCP,MAAM,CAACG,OAAxC,GAAgDG,OAA5E,CAFX;AAGEF,QAAAA,OAAO,EAAC;AAHV,OAAN;;AAKR,SAAKb,WAAL;AACQ,aAAM,EACE,GAAGQ,KADL;AAEEW,QAAAA,OAAO,EAACV,MAAM,CAACG;AAFjB,OAAN;;AAIP,SAAKX,aAAL;AACQ,aAAM,EACK,GAAGO,KADR;AAEKW,QAAAA,OAAO,EAAC;AAFb,OAAN;;AAIR,SAAKhB,eAAL;AACO,aAAM,EACU,GAAGK,KADb;AAEUS,QAAAA,QAAQ,EAACT,KAAK,CAACG,QAAN,CAAeG,MAAf,CAAsBC,OAAO,IAAE;AACpC,gBAAMM,KAAK,GAAC,IAAIC,MAAJ,CAAY,GAAEb,MAAM,CAACG,OAAQ,EAA7B,EAA+B,IAA/B,CAAZ;AACA,iBAAOG,OAAO,CAACQ,IAAR,CAAaC,KAAb,CAAmBH,KAAnB,KAA8BN,OAAO,CAACU,KAAR,CAAcD,KAAd,CAAoBH,KAApB,CAArC;AACH,SAHQ;AAFnB,OAAN;;AAOR,SAAKjB,YAAL;AACS,aAAM,EACa,GAAGI,KADhB;AAEaS,QAAAA,QAAQ,EAAC;AAFtB,OAAN;;AAIR,SAAKZ,aAAL;AACI,aAAM,EACiB,GAAGG,KADpB;AAEiBU,QAAAA,KAAK,EAACT,MAAM,CAACG;AAF9B,OAAN;;AAOL;AACI,aAAOJ,KAAP;AApER;AAuEH,CAxED","sourcesContent":["import {\r\n    ADD_CONTACT,\r\n   \r\n    DELETE_CONTACT,\r\n    SET_CURRENT,\r\n    CLEAR_CURRENT,\r\n    UPDATE_CONTACT,\r\n    FILTER_CONTACTS,\r\n    CLEAR_FILTER,\r\n    CONTACT_ERROR,\r\n    GET_CONTACTS,\r\n    CLEAR_CONTACTS\r\n} from '../types';\r\n\r\n\r\nexport default(state,action)=>{\r\n    switch(action.type){\r\n        case GET_CONTACTS:\r\n            return{\r\n                ...state,\r\n                contacts:action.payload,\r\n                loading:false\r\n            };\r\n\r\n        case ADD_CONTACT:\r\n            return{\r\n                ...state,\r\n                contacts:[action.payload,...state.contacts],\r\n                loading:false\r\n            };\r\n        case DELETE_CONTACT:\r\n             return{\r\n                    ...state,\r\n                    contacts:state.contacts.filter(contact=>contact._id!==action.payload),\r\n                    loading:false\r\n                };\r\n        case CLEAR_CONTACTS:\r\n            return{\r\n                ...state,\r\n                filtered:null,\r\n                contacts:null,\r\n                error:null,\r\n                current:null\r\n            };\r\n\r\n                \r\n         case UPDATE_CONTACT:\r\n                return{\r\n                        ...state,\r\n                        contacts:state.contacts.map(contact=>contact._id===action.payload._id?action.payload:contact),\r\n                        loading:false\r\n                    };\r\n        case SET_CURRENT:\r\n                return{\r\n                        ...state,\r\n                        current:action.payload\r\n                    };\r\n         case CLEAR_CURRENT:\r\n                 return{\r\n                            ...state,\r\n                            current:null\r\n                        };\r\n         case FILTER_CONTACTS:\r\n                return{\r\n                                ...state,\r\n                                filtered:state.contacts.filter(contact=>{\r\n                                    const regex=new RegExp(`${action.payload}`,'gi');\r\n                                    return contact.name.match(regex) ||  contact.email.match(regex); \r\n                                })\r\n                            };\r\n        case CLEAR_FILTER:\r\n                 return{\r\n                                    ...state,\r\n                                    filtered:null\r\n                                };\r\n         case CONTACT_ERROR:\r\n             return{\r\n                                    ...state,\r\n                                    error:action.payload\r\n                                };\r\n                        \r\n                    \r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}